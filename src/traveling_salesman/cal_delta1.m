%% 计算swap操作后与操作前路线route的总距离的差值
% 输入route:  一条路线
% 输入dist:   距离矩阵
% 输入i, j:   交换点i, j
% 输出delta1: swap后路线的总距离 - swap前路线的总距离
function delta1 = cal_delta1(route, dist, i, j)
N = numel(route); % 城市数目

if (i == 1) && (j == N)
    delta1 = -(dist(route(i), route(i + 1)) + dist(route(j - 1), route(j))) + ...
        (dist(route(j), route(i + 1)) + dist(route(j - 1), route(i)));
elseif (i == 1) && (j == 2)
    delta1 = -(dist(route(N), route(i)) + dist(route(j), route(j + 1))) + ...
        (dist(route(N), route(j)) + dist(route(i), route(j + 1)));
elseif i == 1
    delta1 = -(dist(route(N), route(i)) + dist(route(i), route(i + 1)) + ...
        dist(route(j - 1), route(j)) + dist(route(j), route(j + 1))) + ...
        (dist(route(N), route(j)) + dist(route(j), route(i + 1)) + ...
        dist(route(j - 1), route(i)) + dist(route(i), route(j + 1)));
elseif (i == N - 1) && (j == N)
    delta1 = -(dist(route(i - 1), route(i)) + dist(route(j), route(1))) + ...
        (dist(route(i - 1), route(j)) + dist(route(i), route(1)));
elseif j == N
    delta1 = -(dist(route(i - 1), route(i)) + dist(route(i), route(i + 1)) + ...
        dist(route(j - 1), route(j)) + dist(route(j), route(1))) + ...
        (dist(route(i - 1), route(j)) + dist(route(j), route(i + 1)) + ...
        dist(route(j - 1), route(i)) + dist(route(i), route(1)));
elseif abs(i - j) == 1
    delta1 = -(dist(route(i - 1), route(i)) + dist(route(j), route(j + 1))) + ...
        (dist(route(i - 1), route(j)) + dist(route(i), route(j + 1)));
else 
    delta1 = -(dist(route(i - 1), route(i)) + dist(route(i), route(i + 1)) + ...
        dist(route(j - 1), route(j)) + dist(route(j), route(j + 1))) + ...
        (dist(route(i - 1), route(j)) + dist(route(j), route(i + 1)) + ...
        dist(route(j - 1), route(i)) + dist(route(i), route(j + 1)));

end
end